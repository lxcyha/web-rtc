<!doctype html>
<html>
<head>
    <title>lxcyha webrtc</title>
    <link rel="stylesheet" href="/style.css">
    <script src="/socket.io/socket.io.js"></script>
</head>

<body>

<video autoplay id="myVideoTag" muted="muted"></video>
<video autoplay id="theirVideoTag" muted="muted"></video>

<div>
    <label>Your Name</label><input id="myName" type="text">
    <label>Message</label><input id="myMessage" type="text">
    <input type="submit" id="sendMessage">
    <div id="chatArea">Message Output:<br></div>
    <div id="signalingArea">Signaling Messages:<br></div>
</div>

<script>

    var myVideoArea = document.querySelector('#myVideoTag')
    var theirVideoArea = document.querySelector('#theirVideoTag')
    var myName = document.querySelector('#myName')
    var myMessage = document.querySelector('#myMessage')
    var sendMessage = document.querySelector('#sendMessage')
    var chatArea = document.querySelector('#chatArea')
    var signalingArea = document.querySelector('#signalingArea')
    var ROOM = 'chat'
    var SIGNAL_ROOM = 'signal_room'
    var configuration = {
        'iceServers': [{
            'url': 'stun:stun.l.google.com:19302'
        }]
    }
    var rtcPeerConn

    io = io.connect()
    io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM})

    io.emit('signal', {"type": "user_here", "message": "Are your ready for a call?", "room": SIGNAL_ROOM})

    io.on('announce', function (data) {
        displayMessage(data.message)
    })

    io.on('signaling_message', function (data) {
        displaySignalMessage("Signal received: " + data.type)

        if (!rtcPeerConn) {
            startSignaling()
        }

        if (data.type !== 'user_here') {
            var message = JSON.parse(data.message)
            if (message.sdp) {
                rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp), function () {
                    if (rtcPeerConn.remoteDescription.type == 'offer') {
                        rtcPeerConn.createAnswer(sendLocalDesc, logError)
                    }
                })
            } else {
                rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate))
            }
        }

    })

    function startSignaling() {
        displaySignalMessage('starting singnaling')

        rtcPeerConn = new webkitRTCPeerConnection(configuration)

        rtcPeerConn.onicecandidate = function (evt) {
            if (evt.candidate) {
                io.emit('signal', {
                    type: 'ice candidate',
                    message: JSON.stringify({
                        candidate: evt.candidate
                    }),
                    room: SIGNAL_ROOM
                })
            }
            displaySignalMessage('completed that ice candidate')
        }

        rtcPeerConn.onnegotiationneeded = function () {
            displaySignalMessage('on negotiation called')
            rtcPeerConn.createOffer(sendLocalDesc, logError)
        }

        rtcPeerConn.onaddstream = function (evt) {
            displaySignalMessage('going to add their stream')
            theirVideoArea.src = URL.createObjectURL(evt.stream)
        }

        navigator.getUserMedia({
            audio: true,
            video: true
        }, function (stream) {
            displaySignalMessage('going to display my stream...')
            myVideoArea.src = URL.createObjectURL(stream)
            rtcPeerConn.addStream(stream)
        }, logError)
    }

    function sendLocalDesc(desc) {
        rtcPeerConn.setLocalDescription(desc, function () {
            displaySignalMessage('sending local description')
            io.emit('signal', {
                type: "SDP",
                message: JSON.stringify({sdp: rtcPeerConn.localDescription}),
                root: SIGNAL_ROOM
            })
        })
    }

    function logError(error) {
        displaySignalMessage(error.name + ': ' + error.message)
    }


    io.on('message', function (data) {
        displayMessage(data.author + ": " + data.message)
    })

    function displayMessage(message) {
        chatArea.innerHTML = chatArea.innerHTML + '<br>' + message
    }

    function displaySignalMessage(message) {
        signalingArea.innerHTML = signalingArea.innerHTML + '<br>' + message
    }

    sendMessage.addEventListener('click', function (ev) {
        io.emit('send', {"author": myName.value, "message": myMessage.value})
        ev.preventDefault()
    }, false)


</script>
</body>


</html>