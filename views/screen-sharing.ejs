<!doctype html>
<html>
<head>
    <title>lxcyha webrtc</title>
    <link rel="stylesheet" href="/style.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="getscreenmedia.bundle.js"></script>
</head>

<body>

<video autoplay id="myVideoTag" muted="muted"></video>
<video autoplay id="theirVideoTag" muted="muted"></video>
<div>
    <input type="file" id="sendFile"><br>
    <progress id="fileProgress" value="1" max="100"></progress>
    <a id="receivedFileLink"></a>
    <hr>
</div>
<div>
    <label>Your Name</label><input id="myName" type="text">
    <label>Message</label><input id="myMessage" type="text">
    <input type="submit" id="sendMessage">
    <div id="chatArea">Message Output:<br></div>
    <div id="signalingArea">Signaling Messages:<br></div>
</div>

<script>


    getScreenMedia(function (err, stream) {
        // if the browser doesn't support user media
        // or the user says "no" the error gets passed
        // as the first argument.
        if (err) {
            console.log('failed');
        } else {
            console.log('got a stream', stream);
        }
    });



    var myVideoArea = document.querySelector('#myVideoTag')
    var theirVideoArea = document.querySelector('#theirVideoTag')
    var myName = document.querySelector('#myName')
    var myMessage = document.querySelector('#myMessage')
    var sendMessage = document.querySelector('#sendMessage')
    var chatArea = document.querySelector('#chatArea')
    var signalingArea = document.querySelector('#signalingArea')
    var sendFile = document.querySelector('#sendFile')
    var fileProgress = document.querySelector('#fileProgress')
    var downloadLink = document.querySelector('#receivedFileLink')
    var ROOM = 'chat_room'
    var SIGNAL_ROOM = 'signal_room'
    var FILES_ROOM = 'files'
    var configuration = {
        'iceServers': [{
            'url': 'stun:stun.l.google.com:19302'
        }]
    }
    var rtcPeerConn
    var dataChannelOptions = {
        ordered: false, // no guaranteed delivery, unreliable but faster
        maxPacketLifeTime: 1000 // milliseconds
    }
    var dataChannel
    var receivedFileName
    var receivedFileSize
    var fileBuffer = []
    var fileSize = 0

    io = io.connect()

    io.emit('ready', {"chat_room": ROOM, "signal_room": SIGNAL_ROOM, "files_room": FILES_ROOM})

    io.emit('signal', {
        "type": "user_here",
        "message": "Are your ready for a call?",
        "room": SIGNAL_ROOM,
    })

    io.on('signaling_message', function (data) {
        displaySignalMessage("Signal received: " + data.type)

        if (!rtcPeerConn) {
            startSignaling()
        }

        if (data.type !== 'user_here') {
            var message = JSON.parse(data.message)
            if (message.sdp) {
                displaySignalMessage('get remote description')
                rtcPeerConn.setRemoteDescription(new RTCSessionDescription(message.sdp)).then(function () {

                    displaySignalMessage('setRemoteDescription success ', rtcPeerConn.remoteDescription.type)
                    if (rtcPeerConn.remoteDescription.type === 'offer') {
                        displaySignalMessage('create answer')
                        rtcPeerConn.createAnswer(sendLocalDesc, logError)
                    }
                }, logError)
            } else {
                rtcPeerConn.addIceCandidate(new RTCIceCandidate(message.candidate)).catch(logError)
            }
        }

    })

    io.on('files', function (data) {
        receivedFileName = data.filename
        receivedFileSize = data.filesize
        displaySignalMessage('websockets says the fiel on it\'s way is ' + receivedFileName + ' (' + receivedFileSize + ')')
    })

    function startSignaling() {
        displaySignalMessage('starting singnaling')

        rtcPeerConn = new webkitRTCPeerConnection(configuration, null)
        dataChannel = rtcPeerConn.createDataChannel('textMessages', dataChannelOptions)
        dataChannel.onopen = dataChannelStateChanged
        rtcPeerConn.ondatachannel = receiveDataChannel

        rtcPeerConn.onicecandidate = function (evt) {
            if (evt.candidate) {
                io.emit('signal', {
                    type: 'ice candidate',
                    message: JSON.stringify({
                        candidate: evt.candidate
                    }),
                    room: SIGNAL_ROOM
                })
            }
            displaySignalMessage('completed that ice candidate...')
        }

        rtcPeerConn.onnegotiationneeded = function () {
            displaySignalMessage('on negotiation called')
            rtcPeerConn.createOffer().then(function (desc) {
                sendLocalDesc(desc)
            }, logError)
        }

        rtcPeerConn.onaddstream = function (evt) {
            displaySignalMessage('going to add their stream')
            theirVideoArea.srcObject = evt.stream
        }

        navigator.mediaDevices.getUserMedia({
            video: {
                mandatory: {
                    minWidth: 180,
                    minHeight: 180,
                    maxWidth: 320,
                    maxHeight: 320
                }
            },
            audio: false
        }).then(function (stream) {
            displaySignalMessage('going to display my stream...')
            myVideoArea.srcObject = stream
            rtcPeerConn.addStream(stream)
        }).catch(logError);
    }

    function dataChannelStateChanged() {
        if (dataChannel.readyState === 'open') {
            displaySignalMessage('Data Channel open')
            dataChannel.onmessage = receiveDataChannelMessage
        }
    }

    function receiveDataChannel(event) {
        displaySignalMessage('Receiving a data channel')
        dataChannel = event.channel
        dataChannel.onmessage = receiveDataChannelMessage
    }

    function receiveDataChannelMessage(event) {
        displaySignalMessage('Incoming Message')
        displayMessage('From DataChannel: ' + event.data)

        // This is where we process incoming files
        fileBuffer.push(event.data)
        fileSize += event.data.byteLength
        fileProgress.value = fileSize

        if (fileSize === receivedFileSize) {
            var received = new window.Blob(fileBuffer)
            fileBuffer = []
            downloadLink.href = URL.createObjectURL(received)
            downloadLink.download = receivedFileName
            downloadLink.appendChild(document.createTextNode(receivedFileName + '(' + fileSize + ') bytes'))
        }
    }

    function sendLocalDesc(desc) {
        rtcPeerConn.setLocalDescription(desc).then(function () {
            displaySignalMessage('sending local description')
            io.emit('signal', {
                type: "SDP",
                message: JSON.stringify({sdp: rtcPeerConn.localDescription}),
                room: SIGNAL_ROOM
            })
        }, logError)
    }

    function logError(error) {
        displaySignalMessage(error.name + ': ' + error.message)
    }


    io.on('announce', function (data) {
        displayMessage(data.message)
    })


    io.on('message', function (data) {
        displayMessage(data.author + ": " + data.message)
    })

    function displayMessage(message) {
        chatArea.innerHTML = chatArea.innerHTML + '<br>' + message
    }

    function displaySignalMessage(message) {
        signalingArea.innerHTML = signalingArea.innerHTML + '<br>' + message
    }

    sendMessage.addEventListener('click', function (ev) {
        io.emit('send', {"author": myName.value, "message": myMessage.value})
        dataChannel.send(myName.value + ' says ' + myMessage.value)

        ev.preventDefault()
    }, false)

    sendFile.addEventListener('change', function (ev) {
        var file = sendFile.files[0]
        displaySignalMessage('sending file ' + file.name + ' (' + file.size + ')')
        io.emit('files', {filename: file.name, filesize: file.size, room: FILES_ROOM})

        fileProgress.max = file.size
        var chunkSize = 16384
        var sliceFile = function (offset) {
            var reader = new window.FileReader()
            reader.onload = (function (e) {
                return function (e) {
                    dataChannel.send(e.target.result)
                    if (file.size > offset + e.target.result.byteLength) {
                        window.setTimeout(sliceFile, 0, offset + chunkSize)
                    }
                    fileProgress.value = offset + e.target.result.byteLength
                }
            })(file)
            var slice = file.slice(offset, offset + chunkSize)
            reader.readAsArrayBuffer(slice)
        }
        sliceFile(0)
    }, false)


</script>
</body>


</html>